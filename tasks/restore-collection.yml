---
- name: Set restore location
  set_fact:
    solr_cloud_restore_location: '{{ solr_cloud_restore.source.file is defined | ternary (use_directory_path, use_s3_tmp_path) }}'
  vars:
    use_directory_path: '{{ directory_path | d () }}'
    use_s3_tmp_path: '{{ epoch_tmp_path | d () }}/{{ bucket_key | d () }}'

- name: Show basename and dirname
  debug:
    var: item
  loop:
    - '{{ solr_cloud_restore_location | basename }}'
    - '{{ solr_cloud_restore_location | dirname }}'

- pause:

- name: Restore collection via API call
  uri:
    url: '{{ solr_cloud_restore_base_url }}/collections?'
    body: '{{ params | join ("&") }}'
    method: POST
  vars:
    params:
      - action=RESTORE
      - 'name={{ solr_cloud_restore_location | basename }}'
      - 'location={{ solr_cloud_restore_location | dirname }}'
      - 'collection={{ solr_cloud_restore.collection.name }}'
      - 'async={{ ansible_date_time.epoch }}-{{ ansible_loop.index + index_offset | d (0) | int }}'
  register: collection_call

- name: Check request ids for completed restores
  uri:
    url: '{{ solr_cloud_restore_base_url }}/collections?'
    body: '{{ params | join("&") }}'
    method: POST
  vars:
    params:
      - action=requeststatus
      - 'requestid={{ request_id }}'
    request_id: '{{ collection_call | json_query("json.requestid") }}'
    state: '{{ restore_status | json_query("json.status.state") }}'
  register: restore_status
  until: state == 'completed'
  failed_when: state == 'failed'
  retries: '{{ solr_cloud_restore_retries }}'
  delay: '{{ solr_cloud_restore_delay }}'